{"version":3,"sources":["webpack:///./src/pages/application/app-design/components/PageCanvas/index.vue?e827","webpack:///./src/pages/application/app-design/components/PageCanvas/index.vue","webpack:///src/pages/application/app-design/components/PageCanvas/index.vue","webpack:///./src/pages/application/app-design/components/PageCanvas/index.vue?b78e","webpack:///./src/pages/application/app-design/components/PageCanvas/index.vue?9a46","webpack:///./src/pages/application/app-design/components/PageCanvas/index.vue?eddc"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","nativeOn","$event","preventDefault","class","isShowDialogCanvas","isShowTimerCanvas","isShowModal","currentTimer","_e","_v","pageElement","_b","key","pageProps","elementId","ref","tag","attrs","timerContainer","children","_l","timer","on","handleTimerClick","$getImgPrefix","iconMap","elementType","_s","getPropsByKey","elementName","dialogContainer","dialog","currentDialog","handleDialogClick","directives","name","rawName","value","hoverCoverStyle","isShowHover","expression","style","staticRenderFns","component","x","layout","y","h","query","styles","overflowX","overflowY","className","animation","content","__esModule","default","module","i","locals","exports","add"],"mappings":"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","file":"83-941c78b42fca4defe959.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"canvas-wrapper\"},[_c('n-form',{staticClass:\"page-form-wrapper\",nativeOn:{\"submit\":function($event){$event.preventDefault();}}},[_c('div',{staticClass:\"page-canvas\",class:{ 'is-dialog-show': _vm.isShowDialogCanvas || _vm.isShowTimerCanvas}},[(_vm.isShowDialogCanvas || _vm.isShowTimerCanvas)?_c('div',{staticClass:\"dialog-mask\",class:{ 'is-show-modal': _vm.isShowModal || _vm.currentTimer }}):_vm._e(),_vm._v(\" \"),_c(_vm.pageElement,_vm._b({key:_vm.pageProps.elementId,ref:_vm.pageProps.elementId,tag:\"component\",attrs:{\"data-zone\":((_vm.pageProps.elementId) + \"_\" + (_vm.pageProps.elementType)),\"id\":(\"page_\" + (_vm.pageProps.elementId))}},'component',_vm.pageProps,false))],1)]),_vm._v(\" \"),_c('div',{staticClass:\"dialog-list\"},[(_vm.timerContainer)?[_c('div',{staticClass:\"timer-area\"},[(_vm.timerContainer.children.length)?_vm._l((_vm.timerContainer.children),function(timer){return _c('el-tag',{key:timer.elementId,staticClass:\"dialog-item\",class:{\n              'is-active':\n                _vm.currentTimer && _vm.currentTimer.elementId === timer.elementId,\n            },attrs:{\"size\":\"medium\",\"data-zone\":((timer.elementId) + \"_\" + (timer.elementType))},on:{\"click\":function($event){return _vm.handleTimerClick(timer)}}},[_c('img',{staticClass:\"iconfont\",attrs:{\"src\":_vm.$getImgPrefix(_vm.iconMap[timer.elementType])}}),_vm._v(\"\\n            \"+_vm._s(_vm.getPropsByKey(timer.elementId, 'elementName') || timer.elementName)+\"\\n            \")])}):_c('div',{staticClass:\"dialog-empty\"},[_vm._v(\"定时器收纳区\")])],2)]:_vm._e(),_vm._v(\" \"),(_vm.dialogContainer)?[_c('div',{staticClass:\"dialog-area\"},[(_vm.dialogContainer.children.length)?_vm._l((_vm.dialogContainer.children),function(dialog){return _c('el-tag',{key:dialog.elementId,staticClass:\"dialog-item\",class:{\n              'is-active':\n                _vm.currentDialog && _vm.currentDialog.elementId === dialog.elementId,\n            },attrs:{\"size\":\"medium\",\"data-zone\":((dialog.elementId) + \"_\" + (dialog.elementType))},on:{\"click\":function($event){return _vm.handleDialogClick(dialog)}}},[_c('img',{staticClass:\"iconfont\",attrs:{\"src\":_vm.$getImgPrefix(_vm.iconMap[dialog.elementType])}}),_vm._v(\"\\n            \"+_vm._s(_vm.getPropsByKey(dialog.elementId, 'elementName') || dialog.elementName)+\"\\n          \")])}):_c('div',{staticClass:\"dialog-empty\"},[_vm._v(\"窗体收纳区\")])],2)]:_vm._e()],2),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.hoverCoverStyle && _vm.isShowHover),expression:\"hoverCoverStyle && isShowHover\"}],style:(_vm.hoverCoverStyle),attrs:{\"id\":\"hover-cover\"}}),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.placeholderStyle),expression:\"placeholderStyle\"}],style:(_vm.placeholderStyle),attrs:{\"id\":\"drop-placeholder\"}}),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.dropCoverStyle),expression:\"dropCoverStyle\"}],style:(_vm.dropCoverStyle),attrs:{\"id\":\"drop-cover\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=2247a401&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=2247a401&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2247a401\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"canvas-wrapper\">\n    <n-form class=\"page-form-wrapper\" @submit.native.prevent>\n      <div\n        class=\"page-canvas\"\n        :class=\"{ 'is-dialog-show': isShowDialogCanvas || isShowTimerCanvas}\"\n      >\n        <div\n          v-if=\"isShowDialogCanvas || isShowTimerCanvas\"\n          class=\"dialog-mask\"\n          :class=\"{ 'is-show-modal': isShowModal || currentTimer }\"\n        ></div>\n        <component\n          :is=\"pageElement\"\n          :ref=\"pageProps.elementId\"\n          :data-zone=\"`${pageProps.elementId}_${pageProps.elementType}`\"\n          :key='pageProps.elementId'\n          v-bind=\"pageProps\"\n          :id=\"`page_${pageProps.elementId}`\"\n        ></component>\n      </div>\n    </n-form>\n    <div class=\"dialog-list\">\n      <template v-if=\"timerContainer\">\n        <div class=\"timer-area\">\n          <template v-if=\"timerContainer.children.length\">\n            <el-tag\n              class=\"dialog-item\"\n              :class=\"{\n                'is-active':\n                  currentTimer && currentTimer.elementId === timer.elementId,\n              }\"\n              size=\"medium\"\n              v-for=\"timer in timerContainer.children\"\n              :key=\"timer.elementId\"\n              :data-zone=\"`${timer.elementId}_${timer.elementType}`\"\n              @click=\"handleTimerClick(timer)\"\n              >\n              <img class=\"iconfont\" :src=\"$getImgPrefix(iconMap[timer.elementType])\" />\n              {{ getPropsByKey(timer.elementId, 'elementName') || timer.elementName }}\n              </el-tag>\n          </template>\n          <div class=\"dialog-empty\" v-else>定时器收纳区</div>\n        </div>\n      </template>\n      <template v-if=\"dialogContainer\">\n        <div class=\"dialog-area\">\n          <template v-if=\"dialogContainer.children.length\">\n            <el-tag\n              class=\"dialog-item\"\n              :class=\"{\n                'is-active':\n                  currentDialog && currentDialog.elementId === dialog.elementId,\n              }\"\n              size=\"medium\"\n              v-for=\"dialog in dialogContainer.children\"\n              :key=\"dialog.elementId\"\n              :data-zone=\"`${dialog.elementId}_${dialog.elementType}`\"\n              @click=\"handleDialogClick(dialog)\"\n              >\n              <img class=\"iconfont\" :src=\"$getImgPrefix(iconMap[dialog.elementType])\" />\n              {{ getPropsByKey(dialog.elementId, 'elementName') || dialog.elementName }}\n            </el-tag>\n          </template>\n          <div class=\"dialog-empty\" v-else>窗体收纳区</div>\n        </div>\n      </template>\n    </div>\n    <div\n      id=\"hover-cover\"\n      v-show=\"hoverCoverStyle && isShowHover\"\n      :style=\"hoverCoverStyle\"\n    ></div>\n    <div\n      id=\"drop-placeholder\"\n      v-show=\"placeholderStyle\"\n      :style=\"placeholderStyle\"\n    ></div>\n    <div id=\"drop-cover\" v-show=\"dropCoverStyle\" :style=\"dropCoverStyle\"></div>\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import {\n    DELETE_LAYOUT_DATA,\n    INIT_DYNAMIC_PROPS,\n    TOGGLE_LAYOUT_VISIBLE,\n    INIT_EVENTS_DATA,\n    UPDATE_DYNAMIC_PROPS,\n    HANDLE_COPY,\n  } from '@/config/storeKey'\n  import _ from 'lodash'\n  import {\n    isInCanvas,\n    getDropTargets,\n    getNodeByElementId,\n    getParentNodeByElementId,\n    getResetIdWidget,\n    insertElement,\n    isIncludes,\n    treeUtil,\n    getParentNodeListByElementId,\n    getRandomHexadecimal,\n  } from '@/utils/tree-utils'\n  import {\n    dialogTypes,\n    ignoreDragTypes,\n    formTypes,\n    iconMap,\n    defaultKeys,\n  } from '@/config/widgets'\n  import interact from 'interactjs'\n  import { DRAG_END_EVENT_NAME } from '@/config/eventName'\n  import API from '@/api/application'\n  import publishTemplateList from '@/config/widgetTemplate'\n  import { PUBLISH_TEMPLATE } from '@/config'\n  import { getComponent } from '@/renderer/tools/config'\n  import EventBus, { globalEmit } from '@/renderer/tools/eventBus'\n  import { HIGH_LIGHT, PROPS, UPDATE_DIALOG_TIMER } from '@/config/eventKey'\n  import { getGlobalConfig, update } from '@/renderer/tools/history'\n  import { isValidJsonString } from '@/utils/validateUtils'\n  import { pageInject } from '@/renderer/tools/pageStore'\n  import { getAppVariables, setAppVariables } from '@/utils'\n  import { styleConfig } from '@/config/code-var'\n\n  export default {\n    name: 'PageCanvas',\n    inject: ['dndOptions', ...pageInject],\n    provide() {\n      return {\n        getCurrentDialog: () => this.currentDialog\n      }\n    },\n    data() {\n      return {\n        iconMap,\n        hoverCoverStyle: undefined,\n        mouseEvent: {},\n        placeholderStyle: undefined,\n        dropCoverStyle: undefined,\n        currentDialog: null,\n        currentTimer: null,\n      }\n    },\n    computed: {\n      dynamicProps() {\n        return this.getStore().dynamicProps\n      },\n      layoutData() {\n        return this.getStore().layoutData\n      },\n      pageElement() {\n        const { elementType, elementVersion } = this.layoutData\n        return getComponent(elementType, elementVersion)\n      },\n      pageProps() {\n        return { ...this.layoutData, ...this.getElementPropsById(this.layoutData.elementId) }\n      },\n      dialogContainer() {\n        return getNodeByElementId(this.layoutData, 'dialog-container')\n      },\n      isShowDialogCanvas() {\n        return (\n          this.currentDialog &&\n          (!this.dndOptions.draggingWidget ||\n            (this.dndOptions.draggingWidget &&\n              !dialogTypes.includes(\n                this.dndOptions.draggingWidget.elementType\n              )))\n        )\n      },\n      isShowTimerCanvas() {\n        return (\n          this.currentTimer &&\n          (!this.dndOptions.draggingWidget ||\n            (this.dndOptions.draggingWidget &&\n              this.dndOptions.draggingWidget.elementType !== 'timer'))\n        )\n      },\n      isShowModal() {\n        return this.currentDialog &&\n          typeof this.currentDialog.modal !== 'undefined'\n          ? this.currentDialog.modal\n          : true\n      },\n      isShowHover() {\n        const { draggingWidget, resizingWidget, dndResizing, dndDragging } = this.dndOptions\n        return !draggingWidget && !resizingWidget && !dndResizing && !dndDragging\n      },\n      timerContainer() {\n        return getNodeByElementId(this.layoutData, 'timer-container')\n      },\n    },\n    watch: {\n      'dialogContainer.children'(n) {\n        this.currentDialog = n.find(item => this.getElementPropsById(item.elementId).isVisible !== false)\n      },\n      'timerContainer.children'(n) {\n        this.currentTimer = n.find(item => this.getElementPropsById(item.elementId).isVisible !== false)\n      },\n      isShowDialogCanvas(n) {\n        if (n) {\n          const pageCanvas = document.querySelector('.page-canvas') || {}\n          pageCanvas.scrollTop = 0\n          pageCanvas.scrollLeft = 0\n        }\n      },\n      isShowTimerCanvas(n) {\n        if (n) {\n          const pageCanvas = document.querySelector('.page-canvas') || {}\n          pageCanvas.scrollTop = 0\n          pageCanvas.scrollLeft = 0\n        }\n      },\n    },\n    methods: {\n      handleMouseEnterCanvas: _.throttle(\n        function(event) {\n          event.stopPropagation()\n          if (\n            this.dndOptions.draggingWidget ||\n            this.dndOptions.resizingWidget\n          ) {\n            this.mouseEvent = event\n            return\n          }\n          let hoverTarget\n          const { zone } = event.target.dataset\n          if (zone) {\n            hoverTarget = event.target\n            const elementId = zone.split('_')[0]\n            if (elementId === 'dialog-container') {\n              return\n            }\n            this.dndOptions.hoverId = elementId\n          } else {\n            const target = event.path.find((item) => item.dataset?.zone)\n            if (target) {\n              hoverTarget = target\n              this.dndOptions.hoverId = target.dataset.zone.split('_')[0]\n            } else {\n              this.dndOptions.hoverId = ''\n            }\n          }\n          if (hoverTarget && !hoverTarget.classList.contains('no-hover')) {\n            const container = document.getElementById('app-design-page-main')\n            const { left: pLeft, top: pTop } = container.getBoundingClientRect()\n            const {\n              left: cLeft,\n              top: cTop,\n              width,\n              height,\n            } = hoverTarget.getBoundingClientRect()\n            const left = cLeft - pLeft\n            const top = cTop - pTop\n            this.hoverCoverStyle = {\n              top: `${top - 1}px`,\n              left: `${left - 1}px`,\n              width: `${width + 2}px`,\n              height: `${height + 2}px`,\n            }\n          } else {\n            this.hoverCoverStyle = undefined\n          }\n        },\n        60,\n        {\n          leading: false,\n          trailing: true,\n        }\n      ),\n      handleSelectWidget(event) {\n        event.stopPropagation()\n        const { zone } = event.target.dataset\n        if (zone) {\n          const elementId = zone.split('_')[0]\n          if (elementId === 'dialog-container') {\n            return\n          }\n          this.dndOptions.selectedId = elementId\n        } else {\n          const target = event.path.find((item) => item.dataset?.zone)\n          if (target) {\n            this.dndOptions.selectedId = target.dataset.zone.split('_')[0]\n          }\n        }\n      },\n      handleDialogClick(dialog) {\n        this._storeCommit(TOGGLE_LAYOUT_VISIBLE, { elementId: dialog.elementId })\n        this.$nextTick(() => {\n          setTimeout(() => {\n            this.dndOptions.selectedId = dialog.elementId\n            this.$emit('selectedChanged')\n          }, 10)\n        })\n      },\n      handleTimerClick(timer) {\n        this._storeCommit(TOGGLE_LAYOUT_VISIBLE, { elementId: timer.elementId })\n        this.$nextTick(() => {\n          setTimeout(() => {\n            this.dndOptions.selectedId = timer.elementId\n            this.$emit('selectedChanged')\n          }, 10)\n        })\n      },\n      getPropsByKey(elementId, key) {\n        return this.getElementPropsById(elementId)[key]\n      },\n      isInForm(elementId) {\n        const parentList = getParentNodeListByElementId(\n          this.layoutData,\n          elementId\n        )\n        return (\n          parentList &&\n          parentList.some((item) =>\n            ['form-container'].includes(item.elementType)\n          )\n        )\n      },\n      isInSlot(elementId) {\n        const parentNode = getParentNodeByElementId(this.layoutData, elementId)\n        return parentNode && ['slot'].includes(parentNode.elementType)\n      },\n      isInGrid(elementId) {\n        const parentNode = getParentNodeByElementId(this.layoutData, elementId)\n        return parentNode && ['grid-dnd'].includes(parentNode.elementType)\n      },\n      handleInitDnD() {\n        const that = this\n        document.addEventListener('mouseover', this.handleMouseEnterCanvas)\n        document.addEventListener('click', this.handleSelectWidget)\n\n        // 初始化拖拽\n        interact('.is-accept-drag')\n          .draggable({\n            ignoreFrom: '.resize-handle',\n            manualStart: true,\n            inertia: false,\n            // autoScroll: {\n            //   container: document.querySelector('.page-canvas'),\n            //   margin: 50,\n            //   distance: 5,\n            //   interval: 10,\n            //   speed: 300,\n            // },\n            autoScroll: false,\n            listeners: {\n              move(event) {\n                event.target.style.left = `${event.clientX - 50}px`\n                event.target.style.top = `${event.clientY - 10}px`\n              },\n              end() {\n                const draggingElements = document.querySelectorAll('.dragging-item')\n                Array.prototype.slice.call(draggingElements).forEach(item => item.remove())\n              }\n            },\n          })\n          .on(\n            'down',\n            _.throttle(\n              function(event) {\n                const isNoDrag = event?.path?.some(item => {\n                  return item?.classList?.contains('is-ignore-drag')\n                })\n                const classList = event.target.classList\n                const isOnHandler =\n                  classList.contains('resize-handle') ||\n                  classList.contains('resize-handler') ||\n                  classList.contains('vue-resizable-handle')\n                if (isOnHandler || isNoDrag) {\n                  that._mousedownTarget = null\n                  return\n                }\n                that._mousedownTarget = event.currentTarget\n                that._holding = true\n                clearTimeout(that._holdTimer)\n                that._holdTimer = setTimeout(() => {\n                  that._holding = false\n                }, 30)\n              },\n              20,\n              { leading: true, trailing: false }\n            )\n          )\n          .on('up', function() {\n            that._mousedownTarget = null\n            clearTimeout(that._holdTimer)\n          })\n          .on('move', function(event) {\n            if (!that._mousedownTarget) {\n              return\n            }\n            if (that._holding) {\n              return\n            }\n            const { interaction } = event\n            if (interaction.pointerIsDown && !interaction.interacting()) {\n              if (that.dndOptions.resizingWidget) {\n                return\n              }\n              const { zone } = event.currentTarget.dataset\n              const [id, type, templateId, elementName] = zone.split('_')\n              let draggingWidget\n              if (!id) {\n                // 新增\n                draggingWidget = that.dndOptions.widgets.find(\n                  (widget) => widget.elementType === type\n                )\n                if (templateId) {\n                  draggingWidget.templateId = templateId\n                  draggingWidget.elementName = elementName\n                }\n              } else {\n                // 移动\n                draggingWidget = getNodeByElementId(that.layoutData, that.dndOptions.selectedId)\n              }\n              if (!draggingWidget) {\n                return\n              }\n              that.dndOptions.draggingWidget = draggingWidget\n\n              const isIgnoreDrag = ignoreDragTypes.includes(\n                draggingWidget.elementType\n              )\n\n              let element = document.createElement('div')\n              element.classList.add('is-accept-drag')\n              element.classList.add('dragging-item')\n              element.style.left = `${event.clientX0 - 50}px`\n              element.style.top = `${event.clientY0 - 10}px`\n              element.textContent = draggingWidget.elementName\n              const container = document.querySelector('.app-design-page')\n              container && container.appendChild(element)\n              const interactable = event.interactable\n              const targets = isIgnoreDrag\n                ? []\n                : getDropTargets.call(that, {\n                    layoutData: that.layoutData,\n                    draggingWidget,\n                    currentDialog: that.currentDialog,\n                    hasTree: that.dndOptions.hasTree,\n                    currentTimer: that.currentTimer\n                  })\n              interactable.options.drag.modifiers = [\n                interact.modifiers.snap({ targets }),\n              ]\n              // Start the drag event\n              interaction.start({ name: 'drag' }, interactable, element)\n              that.interaction = interaction\n              that.interactable = interactable\n            }\n          })\n\n        // 初始化drop落点吸附\n        interact('.drop-zone')\n          .dropzone({\n            accept: '.is-accept-drag',\n            overlap: 'pointer',\n            ondropmove: _.debounce(\n              function(event) {\n                that.dropCoverStyle = undefined\n                that.placeholderStyle = undefined\n                const isMoveInTree = event.target.classList.contains(\n                  'tree-node'\n                )\n                const dndOptions = that.dndOptions\n                if (!dndOptions.draggingWidget) {\n                  return\n                }\n                const isDialog = dialogTypes.includes(\n                  dndOptions.draggingWidget.elementType\n                )\n                const isTimer = dndOptions.draggingWidget.elementType === 'timer'\n                if (isTimer || isDialog) {\n                  if (dndOptions.draggingWidget.elementId === dndOptions.selectedId) {\n                    return\n                  }\n                  if (isDialog) {\n                    dndOptions.dropZoneId = that.dialogContainer.elementId\n                  } else {\n                    dndOptions.dropZoneId = that.timerContainer.elementId\n                  }\n                  dndOptions.placement = 'center'\n                  const pageCanvasElement = document.querySelector(\n                    '.page-canvas'\n                  )\n                  const {\n                    left,\n                    top,\n                    width,\n                    height,\n                  } = pageCanvasElement.getBoundingClientRect()\n                  that.placeholderStyle = {\n                    width: `${width}px`,\n                    height: `${height}px`,\n                    left: `${left}px`,\n                    top: `${top}px`,\n                  }\n                  return\n                }\n                const inCanvas = isInCanvas({\n                  x: that.mouseEvent.clientX,\n                  y: that.mouseEvent.clientY,\n                  isDialog,\n                  hasTree: that.dndOptions.hasTree,\n                })\n                if (!inCanvas) {\n                  return\n                }\n                const dropZoneElement = event.target\n                const [id, type] = dropZoneElement.dataset.zone.split('_')\n                if (isIncludes(dndOptions.draggingWidget.children, id)) {\n                  return\n                }\n                dndOptions.dropZoneId = id\n                const {\n                  left,\n                  top,\n                  width,\n                  height,\n                } = event.currentTarget.getBoundingClientRect()\n                const isEqual = (a, b, number = 2) => {\n                  return Math.abs(a - b) < number\n                }\n                const isLeft = isEqual(event.dragEvent.clientX - 1, left)\n                const isRight = isEqual(\n                  event.dragEvent.clientX + 1,\n                  left + width\n                )\n                const isTop = isEqual(event.dragEvent.clientY - 1, top)\n                const isBottom = isEqual(\n                  event.dragEvent.clientY + 1,\n                  top + height\n                )\n                const isCenter =\n                  isEqual(event.dragEvent.clientY, top + height / 2) &&\n                  isEqual(event.dragEvent.clientX, left + width / 2)\n                const placeholderWidth = 6\n                let placeholderStyle = {}\n                let placement\n                switch (true) {\n                  case isLeft:\n                    placement = 'left'\n                    placeholderStyle = isMoveInTree\n                      ? {\n                          width: `${width}px`,\n                          height: `${placeholderWidth}px`,\n                          left: `${left}px`,\n                          top: `${top}px`,\n                        }\n                      : {\n                          width: `${placeholderWidth}px`,\n                          height: `${height}px`,\n                          left: `${left - placeholderWidth}px`,\n                          top: `${top}px`,\n                        }\n                    break\n                  case isRight:\n                    placement = 'right'\n                    placeholderStyle = isMoveInTree\n                      ? {\n                          width: `${width}px`,\n                          height: `${placeholderWidth}px`,\n                          left: `${left}px`,\n                          top: `${top + height - placeholderWidth}px`,\n                        }\n                      : {\n                          width: `${placeholderWidth}px`,\n                          height: `${height}px`,\n                          left: `${left + width}px`,\n                          top: `${top}px`,\n                        }\n                    break\n                  case isTop:\n                    placement = 'top'\n                    placeholderStyle = {\n                      width: `${width}px`,\n                      height: `${placeholderWidth}px`,\n                      left: `${left}px`,\n                      top: `${top - placeholderWidth}px`,\n                    }\n                    break\n                  case isBottom:\n                    placement = 'bottom'\n                    placeholderStyle = {\n                      width: `${width}px`,\n                      height: `${placeholderWidth}px`,\n                      left: `${left}px`,\n                      top: `${top + height}px`,\n                    }\n                    break\n                  case isCenter:\n                    placement = 'center'\n                    placeholderStyle = {\n                      width: `${width}px`,\n                      height: `${height}px`,\n                      left: `${left}px`,\n                      top: `${top}px`,\n                    }\n                    break\n                }\n                that.placeholderStyle = placeholderStyle\n                that.dropCoverStyle = {\n                  top: `${top}px`,\n                  left: `${left}px`,\n                  width: `${width}px`,\n                  height: `${height}px`,\n                }\n                dndOptions.placement = placement\n              },\n              20,\n              { leading: false, trailing: true }\n            ),\n            async ondrop(event) {\n              // 在一大堆操作前记录改动前的旧数据, 后面历史记录用于还原\n              const oldStore = getGlobalConfig.call(that)\n\n              const { dropZoneId, placement } = that.dndOptions\n              let { draggingWidget } = that.dndOptions\n              if (!dropZoneId || !placement || !draggingWidget) {\n                return\n              }\n              const targetNode = getNodeByElementId(that.layoutData, dropZoneId)\n              const targetParentNode = getParentNodeByElementId(\n                that.layoutData,\n                dropZoneId\n              )\n              const isIgnoreDrag = ignoreDragTypes.includes(\n                draggingWidget.elementType\n              )\n              if (isIgnoreDrag) {\n                return\n              }\n              if (draggingWidget.elementId === dropZoneId) {\n                return\n              }\n              if (isIncludes(draggingWidget, dropZoneId)) {\n                return\n              }\n              if (\n                that.isShowDialogCanvas &&\n                !isIncludes(that.dialogContainer, targetNode.elementId)\n              ) {\n                return\n              }\n              const inCanvas = isInCanvas({\n                x: that.mouseEvent.clientX,\n                y: that.mouseEvent.clientY,\n                isDialog: that.isShowDialogCanvas,\n                hasTree: that.dndOptions.hasTree,\n              })\n              if (!inCanvas) {\n                return\n              }\n              const { templateId } = draggingWidget\n              if (templateId) {\n                await that.syncSourceToApp(templateId)\n                draggingWidget = await that.getWidgetByTemplateId(templateId, targetNode, placement)\n              }\n              let newWidget\n              const isNew = !draggingWidget.elementId\n              if (isNew) {\n                newWidget = getResetIdWidget.call(that, draggingWidget)\n                treeUtil.forEach([newWidget], (source) => {\n                  const {children, ...node} = source\n                  const props = { ...node,  ...(node.defaultProps || {} ) }\n                  defaultKeys.forEach(key => {\n                    that.$delete(props, key)\n                  })\n                  that._storeCommit(INIT_DYNAMIC_PROPS, {\n                    elementId: node.elementId,\n                    props: _.cloneDeep(props),\n                  })\n                  if (source.defaultEvents) {\n                    that._storeDispatch(INIT_EVENTS_DATA, {\n                      elementId: node.elementId,\n                      events: node.defaultEvents,\n                    })\n                  }\n                  defaultKeys.forEach(key => {\n                    that.$delete(source, key)\n                  })\n                })\n              } else {\n                newWidget = draggingWidget\n              }\n              if (dialogTypes.includes(newWidget.elementType) || newWidget.elementType === 'timer') {\n                treeUtil.forEach(that.layoutData.children, (node) => {\n                  if (\n                    (dialogTypes.includes(node.elementType) || node.elementType === 'timer') &&\n                    node.elementId !== newWidget.elementId\n                  ) {\n                    globalEmit.call(that, PROPS, { elementId: node.elementId, data: {isVisible: false} })\n                  }\n                })\n              }\n              if (\n                placement !== 'center' &&\n                that.isInSlot(dropZoneId) &&\n                ['data'].includes(that.getElementPropsById(targetParentNode.elementId).slotType)\n              ) {\n                that._storeCommit(UPDATE_DYNAMIC_PROPS, {\n                  dynamicProps: {\n                    [newWidget.elementId]: {\n                      prop: that.getElementPropsById(targetParentNode.elementId).slotName,\n                      useSlotProps: true,\n                    },\n                  },\n                })\n              }\n              if (\n                placement === 'center' &&\n                ['data'].includes(that.getElementPropsById(targetNode.elementId).slotType)\n              ) {\n                that._storeCommit(UPDATE_DYNAMIC_PROPS, {\n                  dynamicProps: {\n                    [newWidget.elementId]: {\n                      prop: that.getElementPropsById(targetNode.elementId).slotName,\n                      useSlotProps: true,\n                    },\n                  },\n                })\n              }\n              if (\n                formTypes.includes(newWidget.elementType) &&\n                that.isInForm(dropZoneId)\n              ) {\n                that._storeCommit(UPDATE_DYNAMIC_PROPS, {\n                  dynamicProps: {\n                    [newWidget.elementId]: {\n                      useSlotProps: true,\n                    },\n                  },\n                })\n              }\n              if (that.isInGrid(dropZoneId) || ['grid-dnd'].includes(targetNode.elementType)) {\n                let x\n                let y\n                let w\n                let h\n\n                if (['grid-dnd'].includes(targetNode.elementType)) {\n                  const {colNum, rowHeight} = that.getElementPropsById(targetNode.elementId)\n                  w = colNum\n                } else {\n                  const {colNum, rowHeight} = that.getElementPropsById(targetParentNode.elementId)\n                  w = colNum\n                }\n                const layout = that.getElementPropsById(targetNode.elementId).layout || {}\n                switch (placement) {\n                  case 'bottom':\n                    x = layout.x\n                    y = layout.y + layout.h\n                    break\n                  case 'center':\n                    x = 0\n                    y = 0\n                    break\n                }\n                globalEmit.call(that, PROPS, {elementId: newWidget.elementId, data: {\n                  layout: {\n                    i: newWidget.elementId,\n                    x: x,\n                    y: y,\n                    w: that.getElementPropsById(newWidget.elementId).layout?.w || w,\n                    h: that.getElementPropsById(newWidget.elementId).layout?.h || h || 6\n                  }}, pushHistory: false})\n\n                if ((that.isInGrid(dropZoneId) && placement !== 'center') || (['grid-dnd'].includes(targetNode.elementType) && placement === 'center')) {\n                  that._storeCommit(UPDATE_DYNAMIC_PROPS, {\n                    dynamicProps: {\n                      [newWidget.elementId]: {\n                        styleConfigList: [\n                          {\n                            name: '根元素',\n                            query: '',\n                            styles: {\n                              overflowX: 'auto',\n                              overflowY: 'auto',\n                            },\n                            className: [],\n                            animation: []\n                          }\n                        ]\n                      },\n                    },\n                  })\n                }\n              }\n              insertElement.call(that, {\n                rootTree: that.layoutData,\n                targetId: dropZoneId,\n                placement,\n                newNode: newWidget,\n                oldSelectedId: that.dndOptions.selectedId,\n                pushHistory: false\n              })\n              if (templateId) {\n                await that._storeDispatch(HANDLE_COPY, {elementId: newWidget.elementId})\n                that._storeDispatch(DELETE_LAYOUT_DATA, { elementId: newWidget.elementId })\n              }\n              setTimeout(() => {\n                // 记录历史\n                update({\n                  oldVal: {\n                    elementId: that.dndOptions.selectedId\n                  },\n                  val: {\n                    elementId: newWidget.elementId\n                  },\n                  extra: {\n                    oldVal: oldStore,\n                    val: getGlobalConfig.call(that)\n                  },\n                  callback({ elementId }) {\n                    setTimeout(() => {\n                      that.dndOptions.selectedId = elementId\n                    }, 0)\n                  }\n                })\n\n                that.dndOptions.selectedId = newWidget.elementId\n                that.hoverCoverStyle = undefined\n              })\n            },\n            ondropdeactivate: _.throttle(\n              function(event) {\n                const currentDropElement = event.relatedTarget\n                currentDropElement.remove()\n                that.dropCoverStyle = undefined\n                that.placeholderStyle = undefined\n                that.dndOptions.draggingWidget = null\n                that.dndOptions.dropZoneId = ''\n                that.dndOptions.placement = ''\n                that.mouseEvent = {}\n                const dragEndEvent = new CustomEvent(DRAG_END_EVENT_NAME, {\n                  detail: true,\n                })\n                dispatchEvent(dragEndEvent)\n              },\n              20,\n              { leading: false, trailing: true }\n            ),\n          })\n          .on(\n            'mousewheel',\n            _.throttle(\n              function() {\n                that.hoverCoverStyle = undefined\n                const { draggingWidget } = that.dndOptions\n                if (!draggingWidget) {\n                  return\n                }\n                that.interaction.stop()\n                that.$nextTick(() => {\n                  const isIgnoreDrag = ignoreDragTypes.includes(\n                    draggingWidget.elementType\n                  )\n                  const targets = isIgnoreDrag\n                    ? []\n                    : getDropTargets.call(that, {\n                        layoutData: that.layoutData,\n                        draggingWidget,\n                        currentDialog: that.currentDialog,\n                        hasTree: that.dndOptions.hasTree,\n                        currentTimer: that.currentTimer\n                      })\n                  const interactable = that.interactable\n                  interactable.options.drag.modifiers = [\n                    interact.modifiers.snap({ targets }),\n                  ]\n                  const element = document.querySelector('.dragging-item')\n                  // Start the drag event\n                  that.interaction.start(\n                    { name: 'drag' },\n                    interactable,\n                    element\n                  )\n                })\n              },\n              200,\n              { leading: false, trailing: true }\n            )\n          )\n\n        // 初始化布局内resize事件\n        interact('.is-resizable')\n          .resizable({\n            allowFrom: '.resize-handle',\n            edges: {\n              left: false,\n              right: true,\n              bottom: false,\n              top: false,\n            },\n            inertia: false,\n            listeners: {\n              move: _.throttle(\n                function(event) {\n                  const {\n                    resizingWidget,\n                    gridSize,\n                    offsetLeft,\n                  } = that.dndOptions\n                  if (!resizingWidget) {\n                    return\n                  }\n                  const { clientX } = event\n                  const resizeWidth = clientX - offsetLeft\n                  const span = Math.ceil(Math.abs(resizeWidth) / gridSize)\n                  if (span > 12 || span < 1) {\n                    return\n                  }\n                  if (!that.oldSpan) {\n                    that.oldSpan = span\n                  }\n                  resizingWidget.span = span\n                  globalEmit.call(that, PROPS, { elementId: resizingWidget.elementId, data: {span}, pushHistory: false })\n                },\n                20,\n                {\n                  leading: false,\n                  trailing: true,\n                }\n              ),\n              end() {\n                const { resizingWidget } = that.dndOptions\n                if(resizingWidget && resizingWidget.span) {\n                  update({\n                    oldVal: that.oldSpan,\n                    val: resizingWidget.span,\n                    callback: (span) => {\n                      globalEmit.call(that, PROPS, { elementId: resizingWidget.elementId, data: {span}, pushHistory: false })\n                    }\n                  })\n                  that.oldSpan = undefined\n                  that.$nextTick(() => {\n                    that.dndOptions.resizingWidget = null\n                  })\n                }\n              },\n            },\n          })\n          .on('down', function(event) {\n            if (!event.target.classList.contains('resize-handle')) {\n              return\n            }\n            const { zone } = event.target.dataset\n            const [id, type] = zone.split('_')\n            that.dndOptions.resizingWidget = getNodeByElementId(\n              that.layoutData,\n              id\n            )\n            const currentElement = document.querySelector(\n              `.page-canvas [data-zone=\"${id}_${type}\"]`\n            )\n            const parentNode = getParentNodeByElementId(that.layoutData, id)\n            const parentElement = document.querySelector(\n              `.page-canvas [data-zone=\"${parentNode.elementId}_${parentNode.elementType}\"]`\n            )\n            const width = parentElement.getBoundingClientRect().width\n            const offsetLeft = currentElement.getBoundingClientRect().left\n            that.dndOptions.gridSize = Math.ceil(width / 12)\n            that.dndOptions.offsetLeft = offsetLeft\n          })\n          .on('up', function() {\n            that.dndOptions.resizingWidget = null\n          })\n        interact.dynamicDrop(true)\n      },\n      handleUpdateLayoutData({ elementId, layout }) {\n        const state = this.getStore()\n        treeUtil.forEach([state.layoutData], node => {\n          if (node.elementId === elementId) {\n            Object.keys(layout).forEach(key => {\n              Vue.set(node, key, _.cloneDeep(layout[key]))\n            })\n          }\n        })\n      },\n      getWidgetByTemplateId(templateId, targetNode, placement) {\n        const state = this.getStore()\n        const layoutData = state.layoutData\n        const currentNode = targetNode\n        const parentNode = getParentNodeByElementId(layoutData, targetNode.elementId)\n        const placeholderId = getRandomHexadecimal(12)\n        let bottom\n        if (parentNode) {\n          bottom = Math.max(...parentNode.children.map(item => (this.getElementPropsById(item.elementId).layout?.y || 0) + (this.getElementPropsById(item.elementId).layout?.h || 0)), 0)\n        } else {\n          bottom = 0\n        }\n        const newWidget = {\n          elementId: placeholderId,\n          elementType: 'placeholder',\n          elementName: '模板组件',\n          elementVersion: 'v1',\n          children: [],\n          defaultProps: {\n            layout: {\n              i: placeholderId,\n              x: 0,\n              y: bottom,\n              w: 12,\n              h: 6\n            }\n          }\n        }\n        switch (placement) {\n          case 'top':\n          case 'left':\n            treeUtil.insertBefore([layoutData], newWidget, currentNode)\n            this.handleUpdateLayoutData({elementId: parentNode.elementId, layout: {children: parentNode.children}})\n            break\n          case 'bottom':\n          case 'right':\n            treeUtil.insertAfter([layoutData], currentNode, newWidget)\n            this.handleUpdateLayoutData({elementId: parentNode.elementId, layout: {children: parentNode.children}})\n            break\n          case 'center':\n            currentNode.children.push(newWidget)\n            this.handleUpdateLayoutData({elementId: currentNode.elementId, layout: {children: currentNode.children}})\n            break\n        }\n        if (templateId.includes(PUBLISH_TEMPLATE)) {\n          const config = publishTemplateList.find(item => item.id === templateId).config\n          return this.handleLoadTemplateData({ config, currentNode, parentNode, layoutData, placement, bottom, placeholderId })\n        }\n        return new Promise((resolve, reject) => {\n          this.$http({\n            url: API.componentTemplatePrivateDetail,\n            data: {\n              id: Number(templateId)\n            }\n          })\n            .then( async ({data}) => {\n              const { config } = data\n              const newNode = await this.handleLoadTemplateData({ config, currentNode, parentNode, layoutData, placement, bottom, placeholderId })\n              resolve(newNode)\n            })\n            .catch(() => {\n              this.$message.error('组件模板加载失败')\n              reject()\n              this._storeDispatch(DELETE_LAYOUT_DATA, { elementId: placeholderId })\n            })\n        })\n      },\n      handleSavePageVariable(res) {\n        return this.$http({\n          url: API.appPageDesignSavePageConfig,\n          data: [\n            {\n              pageDesignId: Number(this.getStore().layoutData.pageDesignId),\n              type: 4,\n              config: JSON.stringify(res),\n            },\n          ],\n        })\n      },\n      handleGetAppVariables() {\n        return this.$http({\n          url: API.appVariablesList,\n          data: {\n            appDesignId: Number(this.$route.query.vid),\n          },\n        })\n          .then(({ data }) => {\n            const entry = data.map((item) => ([item.name, {\n              value: typeof item.defaultValue === 'string' && isValidJsonString(item.defaultValue) ? JSON.parse(item.defaultValue) : item.defaultValue,\n              desc: item.description,\n              key: item.name,\n            }]))\n            const appVariables = Object.fromEntries(entry)\n            setAppVariables(appVariables)\n          })\n      },\n      handleSaveAppVariable(res) {\n        return this.$http({\n          url: API.appVariablesSave,\n          data: {\n            ...res,\n            appDesignId: Number(this.$route.query.vid),\n          },\n        })\n      },\n      async handleLoadTemplateData({ config, currentNode, parentNode, layoutData, placement, bottom, placeholderId }) {\n        const state = this.getStore()\n        const data = JSON.parse(config)\n        let widgetData\n        if (data.pageId) {\n          widgetData = JSON.parse(config.replaceAll(data.pageId, this.getStore().layoutData.elementId))\n        } else {\n          widgetData = data\n        }\n        const { layout, events, props, functionsData = [], jsData = [], dialogs, timers, dynamicVariables, appVariables } = widgetData\n        const newNode = layout\n        const newProps = {}\n        const newEvents = {}\n        const elementIds = []\n        const functionIds = state.functionsData.map(item => item.id)\n        const jsIds = state.jsData.map(item => item.id)\n        functionsData.forEach(item => {\n          if (!functionIds.includes(item.id)) {\n            state.functionsData.push(item)\n          }\n        })\n        jsData.forEach(item => {\n          if (!jsIds.includes(item.id)) {\n            state.jsData.push(item)\n          }\n        })\n        if (dynamicVariables) {\n          const pageId = this.getStore().layoutData.elementId\n          const newPageVariables = {...this.getElementPropsById(pageId).dynamicVariables, ...dynamicVariables}\n          await this.handleSavePageVariable(newPageVariables)\n          newProps[pageId] = {\n            dynamicVariables: newPageVariables\n          }\n        }\n        if (appVariables) {\n          await this.handleGetAppVariables()\n          const beforeAppVariables = getAppVariables()\n          const handlers = []\n          Object.keys(appVariables).forEach(key => {\n            if (beforeAppVariables[key]) {\n              return\n            }\n            const appVariable = appVariables[key]\n            handlers.push(this.handleSaveAppVariable({\n              defaultValue: typeof appVariable.defaultValue === 'string' ? appVariable.defaultValue : JSON.stringify(appVariable.defaultValue),\n              description: appVariable.desc,\n              name: key,\n            }))\n          })\n          await Promise.all(handlers)\n        }\n        treeUtil.forEach(state.layoutData.children, node => {\n          elementIds.push(node.elementId)\n        })\n        if (dialogs) {\n          treeUtil.forEach(dialogs, (child) => {\n            const oldId = child.elementId\n            const type = child.elementType\n            const id = getRandomHexadecimal(6)\n            const newId = elementIds.includes(oldId) ? `${type}-${id}` : oldId\n            child.elementId = newId\n            const currentProps = props[oldId] || {}\n            Object.keys(child).forEach(key => {\n              if (currentProps[key] === undefined && child[key] !== undefined && !['children'].includes(key)) {\n                currentProps[key] = _.cloneDeep(child[key])\n              }\n            })\n            newProps[newId] = {\n              ...props[oldId],\n              layout: props[oldId].layout ? {...props[oldId].layout, i: newId} : undefined,\n              elementId: newId\n            }\n            newEvents[newId] = events[oldId]\n          })\n          this.dialogContainer.children.push(...dialogs)\n        }\n\n        if (timers) {\n          treeUtil.forEach(timers, (child) => {\n            const oldId = child.elementId\n            const type = child.elementType\n            const id = getRandomHexadecimal(6)\n            const newId = elementIds.includes(oldId) ? `${type}-${id}` : oldId\n            child.elementId = newId\n            const currentProps = props[oldId] || {}\n            Object.keys(child).forEach(key => {\n              if (currentProps[key] === undefined && child[key] !== undefined && !['children'].includes(key)) {\n                currentProps[key] = _.cloneDeep(child[key])\n              }\n            })\n            newProps[newId] = {\n              ...props[oldId],\n              layout: props[oldId].layout ? {...props[oldId].layout, i: newId} : undefined,\n              elementId: newId\n            }\n            newEvents[newId] = events[oldId]\n          })\n          this.timerContainer.children.push(...timers)\n        }\n\n        treeUtil.forEach([newNode], (child) => {\n          const oldId = child.elementId\n          const type = child.elementType\n          const id = getRandomHexadecimal(6)\n          // const newId = elementIds.includes(oldId) ? `${type}-${id}` : oldId\n          const newId = oldId\n          child.elementId = newId\n          const currentProps = props[oldId] || {}\n          Object.keys(child).forEach(key => {\n            if (currentProps[key] === undefined && child[key] !== undefined && !['children'].includes(key)) {\n              currentProps[key] = _.cloneDeep(child[key])\n            }\n          })\n          newProps[newId] = {\n            ...props[oldId],\n            layout: props[oldId].layout ? {...props[oldId].layout, i: newId} : undefined,\n            elementId: newId\n          }\n          newEvents[newId] = events[oldId]\n        })\n        // 兼容旧样式\n        Object.keys(newProps).forEach(propKey => {\n          const currentProps = newProps[propKey]\n          if (!currentProps.styleConfigList) {\n            const styleConfigCopy = _.cloneDeep(styleConfig)\n            styleConfigCopy.styles = currentProps.styleName || {}\n            styleConfigCopy.styles.cssText = currentProps.cssText || ''\n            currentProps.styleConfigList = [styleConfigCopy]\n          }\n        })\n        state.dynamicProps = { ...state.dynamicProps, ...newProps }\n        state.eventsData = { ...state.eventsData, ...newEvents }\n        switch (placement) {\n          case 'top':\n          case 'left':\n            treeUtil.insertBefore([layoutData], newNode, currentNode)\n            this.handleUpdateLayoutData({elementId: parentNode.elementId, layout: {children: parentNode.children}})\n            break\n          case 'bottom':\n          case 'right':\n            treeUtil.insertAfter([layoutData], currentNode, newNode)\n            this.handleUpdateLayoutData({elementId: parentNode.elementId, layout: {children: parentNode.children}})\n            break\n          case 'center':\n            currentNode.children.push(newNode)\n            this.handleUpdateLayoutData({elementId: currentNode.elementId, layout: {children: currentNode.children}})\n            break\n        }\n        this.handleUpdateLayoutData({elementId: 'dialog-container', layout: {children: this.dialogContainer.children}})\n        this.handleUpdateLayoutData({elementId: 'timer-container', layout: {children: this.timerContainer.children}})\n        const dragEndEvent = new CustomEvent(DRAG_END_EVENT_NAME, {\n          detail: true,\n        })\n        dispatchEvent(dragEndEvent)\n        await this._storeDispatch(DELETE_LAYOUT_DATA, { elementId: placeholderId })\n        return Promise.resolve(newNode)\n      },\n      getElementPropsById(elementId) {\n        const realId = elementId === 'app' ? this.getStore().layoutData.elementId : elementId\n        return this.getStore().dynamicProps[realId] || {}\n      },\n      syncSourceToApp(templateId) {\n        return this.$http({\n          url: API.appSourceTemplateSyncToApp,\n          data: {\n            appId: +this.$route.query.id,\n            templateIdentifier: templateId.includes(PUBLISH_TEMPLATE) ? `public_${templateId}` : templateId\n          }\n        })\n      }\n    },\n    created () {\n      // this.time = new Date()\n    },\n    async mounted() {\n      EventBus.$on(HIGH_LIGHT, elementId => {\n        this.$nextTick(() => {\n          this.dndOptions.selectedId = elementId\n          this.$emit('selectedChanged')\n        })\n      })\n      EventBus.$on(UPDATE_DIALOG_TIMER, ({currentDialog, currentTimer}) => {\n        this.currentDialog = currentDialog\n        this.currentTimer = currentTimer\n      })\n      await this.$nextTick()\n      // console.log(parseInt(new Date() - this.time)/ 1000)\n      this.handleInitDnD()\n    },\n    beforeDestroy() {\n      document.removeEventListener('mouseover', this.handleMouseEnterCanvas)\n      document.removeEventListener('click', this.handleSelectWidget)\n      EventBus.$off(HIGH_LIGHT)\n      EventBus.$off(UPDATE_DIALOG_TIMER)\n      interact('.drop-zone').unset()\n      interact('.is-accept-drag').unset()\n      interact('.is-resizable').unset()\n    },\n  }\n</script>\n\n<style lang=\"less\" scoped>\n  @import '~@/styles/index.less';\n\n  .canvas-wrapper::v-deep {\n    #hover-cover {\n      pointer-events: none;\n      position: absolute;\n      z-index: 200;\n      border: 1px dashed @drop-main-color;\n    }\n\n    #drop-placeholder {\n      pointer-events: none;\n      position: fixed;\n      background: @drop-main-color;\n      opacity: 0.9;\n      z-index: 200;\n    }\n\n    #drop-cover {\n      pointer-events: none;\n      position: fixed;\n      background: @drop-main-color;\n      opacity: 0.2;\n      z-index: 200;\n    }\n\n    .page-canvas {\n      position: absolute;\n      top: 49px;\n      right: 10px;\n      bottom: 60px;\n      left: 10px;\n      box-sizing: border-box;\n      user-select: none;\n      background-color: #ffffff;\n      box-shadow: 0 1px 4px 0 rgba(31, 50, 88, 0.2);\n      overflow-y: auto;\n\n      &.is-dialog-show {\n        overflow: hidden;\n        .dialog-container {\n          pointer-events: auto;\n        }\n      }\n\n      & > .dialog-mask {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        z-index: 100;\n        user-select: none;\n        background: rgba(0, 0, 0, 0);\n\n        &.is-show-modal {\n          background: rgba(0, 0, 0, 0.5);\n        }\n      }\n    }\n\n    .dialog-list {\n      position: absolute;\n      bottom: 0;\n      z-index: 1000;\n      width: 100%;\n      height: 50px;\n      padding: 0 10px;\n\n      .dialog-empty {\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        font-size: 12px;\n        color: #999999;\n        text-align: center;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .timer-area, .dialog-area {\n        position: absolute;\n        bottom: 0;\n        z-index: 100;\n        display: flex;\n        height: 100%;\n        border: 1px solid #eeeeee;\n        border-radius: 4px;\n        overflow-y: hidden;\n        overflow-x: hidden;\n        background: #ffffff;\n        transition: all .3s;\n        .dialog-item {\n          margin: 10px 10px 0 10px;\n        }\n      }\n      .timer-area {\n        flex-direction: column;\n        align-items: flex-start;\n        left: 10px;\n        width: 150px;\n\n        &:hover {\n          height: unset;\n          min-height: 100%;\n          width: unset;\n          min-width: 150px;\n          padding-bottom: 10px;\n        }\n      }\n      .dialog-area {\n        flex-wrap: wrap;\n        left: 175px;\n        width: calc(100% - 185px);\n\n        &:hover {\n          height: unset;\n          min-height: 100%;\n          padding-bottom: 10px;\n        }\n      }\n\n      .dialog-item {\n\n        &.is-active {\n          outline: 2px solid @drop-main-color;\n        }\n\n        &:hover {\n          cursor: pointer;\n        }\n\n        .iconfont {\n          margin-right: 4px;\n          width: 14px;\n          height: 14px;\n        }\n      }\n    }\n  }\n</style>\n","export * from \"-!../../../../../../node_modules/vue-style-loader/index.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../node_modules/less-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=2247a401&lang=less&scoped=true&\"","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../node_modules/less-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=2247a401&lang=less&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"8f351d02\", content, true, {});","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js?cacheDirectory=true!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js?cacheDirectory=true!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\""],"sourceRoot":""}