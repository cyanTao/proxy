{"version":3,"sources":["webpack:///./node_modules/vxe-table-plugin-export-xlsx/dist/index.common.js"],"names":["Object","defineProperty","exports","value","VXETablePluginExportXLSX","_ctor","_interopRequireDefault","_xlsx","obj","__esModule","toBuffer","wbout","buf","ArrayBuffer","length","view","Uint8Array","index","charCodeAt","getValidColumn","column","childNodes","exportXLSX","params","msgKey","$table","options","columns","colgroups","datas","$vxe","modal","t","message","sheetName","isHeader","isFooter","isMerge","isColgroup","original","showMsg","mergeCells","getMergeCells","colList","footList","sheetCols","sheetMerges","colHead","forEach","id","property","getTitle","push","wpx","toInteger","renderWidth","cols","rIndex","groupHead","_colSpan","_rowSpan","validColumn","columnIndex","indexOf","s","r","c","e","mergeItem","mergeRowIndex","row","mergeRowspan","rowspan","mergeColIndex","col","mergeColspan","colspan","rowIndex","getVTRowIndex","_row","rowList","map","item","rest","cellValue","cellType","isNaN","Number","getCellLabel","footerData","getTableData","footers","opts","footerFilterMethod","filter","items","$rowIndex","getFooterData","rows","$getColumnIndex","getFooterCellValue","exportMethod","book","utils","book_new","list","concat","sheet","json_to_sheet","skipHeader","book_append_sheet","write","bookType","bookSST","type","blob","Blob","filename","window","navigator","msSaveBlob","linkElem","document","createElement","target","download","href","URL","createObjectURL","body","appendChild","click","removeChild","alert","status","downloadFile","close","duration","setTimeout","handleImportEvent","file","_importResolve","_importReject","fileReader","FileReader","onload","tableFields","field","workbook","read","result","sheet_to_json","first","Sheets","fields","keys","some","checkImportData","records","record","isUndefined","createData","then","data","mode","insertAt","reloadData","readAsBinaryString","importXLSX","handleExportEvent","install","vxetable","interceptor","setup","types","xlsx","mixin","VXETable","use","_default"],"mappings":"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","file":"async~VXEExportXLSX-941c78b42fca4defe959.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.VXETablePluginExportXLSX = void 0;\n\nvar _ctor = _interopRequireDefault(require(\"xe-utils/ctor\"));\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-enable no-unused-vars */\nfunction getFooterCellValue($table, opts, rows, column) {\n  var cellValue = rows[$table.$getColumnIndex(column)];\n  return cellValue;\n}\n\nfunction getFooterData(opts, footerData) {\n  var footerFilterMethod = opts.footerFilterMethod;\n  return footerFilterMethod ? footerData.filter(function (items, index) {\n    return footerFilterMethod({\n      items: items,\n      $rowIndex: index\n    });\n  }) : footerData;\n}\n\nfunction toBuffer(wbout) {\n  var buf = new ArrayBuffer(wbout.length);\n  var view = new Uint8Array(buf);\n\n  for (var index = 0; index !== wbout.length; ++index) {\n    view[index] = wbout.charCodeAt(index) & 0xFF;\n  }\n\n  return buf;\n}\n\nfunction getCellLabel(column, cellValue) {\n  if (cellValue) {\n    switch (column.cellType) {\n      case 'string':\n        break;\n\n      case 'number':\n        if (!isNaN(cellValue)) {\n          return Number(cellValue);\n        }\n\n        break;\n\n      default:\n        if (cellValue.length < 12 && !isNaN(cellValue)) {\n          return Number(cellValue);\n        }\n\n        break;\n    }\n  }\n\n  return cellValue;\n}\n\nfunction getValidColumn(column) {\n  var childNodes = column.childNodes;\n  var isColGroup = childNodes && childNodes.length;\n\n  if (isColGroup) {\n    return getValidColumn(childNodes[0]);\n  }\n\n  return column;\n}\n\nfunction exportXLSX(params) {\n  var msgKey = 'xlsx';\n  var $table = params.$table,\n      options = params.options,\n      columns = params.columns,\n      colgroups = params.colgroups,\n      datas = params.datas;\n  var $vxe = $table.$vxe;\n  var modal = $vxe.modal,\n      t = $vxe.t;\n  var message = options.message,\n      sheetName = options.sheetName,\n      isHeader = options.isHeader,\n      isFooter = options.isFooter,\n      isMerge = options.isMerge,\n      isColgroup = options.isColgroup,\n      original = options.original;\n  var showMsg = message !== false;\n  var mergeCells = $table.getMergeCells();\n  var colList = [];\n  var footList = [];\n  var sheetCols = [];\n  var sheetMerges = []; // 处理表头\n\n  if (isHeader) {\n    var colHead = {};\n    columns.forEach(function (column) {\n      colHead[column.id] = original ? column.property : column.getTitle();\n      sheetCols.push({\n        wpx: _ctor[\"default\"].toInteger(column.renderWidth * 0.75)\n      });\n    });\n\n    if (isColgroup && !original && colgroups) {\n      colgroups.forEach(function (cols, rIndex) {\n        var groupHead = {};\n        columns.forEach(function (column) {\n          groupHead[column.id] = null;\n        });\n        cols.forEach(function (column) {\n          var _colSpan = column._colSpan,\n              _rowSpan = column._rowSpan;\n          var validColumn = getValidColumn(column);\n          var columnIndex = columns.indexOf(validColumn);\n          groupHead[validColumn.id] = original ? validColumn.property : column.getTitle();\n\n          if (_colSpan > 1 || _rowSpan > 1) {\n            sheetMerges.push({\n              s: {\n                r: rIndex,\n                c: columnIndex\n              },\n              e: {\n                r: rIndex + _rowSpan - 1,\n                c: columnIndex + _colSpan - 1\n              }\n            });\n          }\n        });\n        colList.push(groupHead);\n      });\n    } else {\n      colList.push(colHead);\n    }\n  } // 处理合并\n\n\n  if (isMerge && !original) {\n    mergeCells.forEach(function (mergeItem) {\n      var mergeRowIndex = mergeItem.row,\n          mergeRowspan = mergeItem.rowspan,\n          mergeColIndex = mergeItem.col,\n          mergeColspan = mergeItem.colspan;\n\n      for (var rIndex = 0; rIndex < datas.length; rIndex++) {\n        var rowIndex = $table.getVTRowIndex(datas[rIndex]._row);\n\n        if (rowIndex === mergeRowIndex) {\n          if (isHeader && colgroups) {\n            rowIndex = rIndex + colgroups.length;\n          }\n\n          sheetMerges.push({\n            s: {\n              r: rowIndex,\n              c: mergeColIndex\n            },\n            e: {\n              r: rowIndex + mergeRowspan - 1,\n              c: mergeColIndex + mergeColspan - 1\n            }\n          });\n          break;\n        }\n      }\n    });\n  }\n\n  var rowList = datas.map(function (item) {\n    var rest = {};\n    columns.forEach(function (column) {\n      rest[column.id] = getCellLabel(column, item[column.id]);\n    });\n    return rest;\n  }); // 处理表尾\n\n  if (isFooter) {\n    var _$table$getTableData = $table.getTableData(),\n        footerData = _$table$getTableData.footerData;\n\n    var footers = getFooterData(options, footerData);\n    footers.forEach(function (rows) {\n      var item = {};\n      columns.forEach(function (column) {\n        item[column.id] = getFooterCellValue($table, options, rows, column);\n      });\n      footList.push(item);\n    });\n  }\n\n  var exportMethod = function exportMethod() {\n    var book = _xlsx[\"default\"].utils.book_new();\n\n    var list = (isHeader ? colList : []).concat(rowList).concat(footList);\n\n    var sheet = _xlsx[\"default\"].utils.json_to_sheet(list.length ? list : [{}], {\n      skipHeader: true\n    });\n\n    sheet['!cols'] = sheetCols;\n    sheet['!merges'] = sheetMerges; // 转换数据\n\n    _xlsx[\"default\"].utils.book_append_sheet(book, sheet, sheetName);\n\n    var wbout = _xlsx[\"default\"].write(book, {\n      bookType: 'xlsx',\n      bookSST: false,\n      type: 'binary'\n    });\n\n    var blob = new Blob([toBuffer(wbout)], {\n      type: 'application/octet-stream'\n    }); // 导出 xlsx\n\n    downloadFile(params, blob, options);\n\n    if (showMsg) {\n      modal.close(msgKey);\n      modal.message({\n        message: t('vxe.table.expSuccess'),\n        status: 'success'\n      });\n    }\n  };\n\n  if (showMsg) {\n    modal.message({\n      id: msgKey,\n      message: t('vxe.table.expLoading'),\n      status: 'loading',\n      duration: -1\n    });\n    setTimeout(exportMethod, 1500);\n  } else {\n    exportMethod();\n  }\n}\n\nfunction downloadFile(params, blob, options) {\n  var $table = params.$table;\n  var $vxe = $table.$vxe;\n  var modal = $vxe.modal,\n      t = $vxe.t;\n  var message = options.message,\n      filename = options.filename,\n      type = options.type;\n  var showMsg = message !== false;\n\n  if (window.Blob) {\n    if (navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, \"\".concat(filename, \".\").concat(type));\n    } else {\n      var linkElem = document.createElement('a');\n      linkElem.target = '_blank';\n      linkElem.download = \"\".concat(filename, \".\").concat(type);\n      linkElem.href = URL.createObjectURL(blob);\n      document.body.appendChild(linkElem);\n      linkElem.click();\n      document.body.removeChild(linkElem);\n    }\n  } else {\n    if (showMsg) {\n      modal.alert({\n        message: t('vxe.error.notExp'),\n        status: 'error'\n      });\n    }\n  }\n}\n\nfunction checkImportData(tableFields, fields) {\n  return fields.some(function (field) {\n    return tableFields.indexOf(field) > -1;\n  });\n}\n\nfunction importXLSX(params) {\n  var $table = params.$table,\n      columns = params.columns,\n      options = params.options,\n      file = params.file;\n  var $vxe = $table.$vxe,\n      _importResolve = $table._importResolve,\n      _importReject = $table._importReject;\n  var modal = $vxe.modal,\n      t = $vxe.t;\n  var showMsg = options.message !== false;\n  var fileReader = new FileReader();\n\n  fileReader.onload = function (e) {\n    var tableFields = [];\n    columns.forEach(function (column) {\n      var field = column.property;\n\n      if (field) {\n        tableFields.push(field);\n      }\n    });\n\n    var workbook = _xlsx[\"default\"].read(e.target.result, {\n      type: 'binary'\n    });\n\n    var rest = _xlsx[\"default\"].utils.sheet_to_json(_ctor[\"default\"].first(workbook.Sheets));\n\n    var fields = rest ? _ctor[\"default\"].keys(rest[0]) : [];\n    var list = rest;\n    var status = checkImportData(tableFields, fields);\n\n    if (status) {\n      var records = list.map(function (item) {\n        var record = {};\n        tableFields.forEach(function (field) {\n          record[field] = _ctor[\"default\"].isUndefined(item[field]) ? null : item[field];\n        });\n        return record;\n      });\n      $table.createData(records).then(function (data) {\n        var loadRest;\n\n        if (options.mode === 'insert') {\n          loadRest = $table.insertAt(data, -1);\n        } else {\n          loadRest = $table.reloadData(data);\n        }\n\n        return loadRest.then(function () {\n          if (_importResolve) {\n            _importResolve({\n              status: true\n            });\n          }\n        });\n      });\n\n      if (showMsg) {\n        modal.message({\n          message: t('vxe.table.impSuccess', [records.length]),\n          status: 'success'\n        });\n      }\n    } else {\n      if (showMsg) {\n        modal.message({\n          message: t('vxe.error.impFields'),\n          status: 'error'\n        });\n      }\n\n      if (_importReject) {\n        _importReject({\n          status: false\n        });\n      }\n    }\n  };\n\n  fileReader.readAsBinaryString(file);\n}\n\nfunction handleImportEvent(params) {\n  if (params.options.type === 'xlsx') {\n    importXLSX(params);\n    return false;\n  }\n}\n\nfunction handleExportEvent(params) {\n  if (params.options.type === 'xlsx') {\n    exportXLSX(params);\n    return false;\n  }\n}\n/**\n * 基于 vxe-table 表格的增强插件，支持导出 xlsx 格式\n */\n\n\nvar VXETablePluginExportXLSX = {\n  install: function install(vxetable) {\n    var interceptor = vxetable.interceptor;\n    vxetable.setup({\n      \"export\": {\n        types: {\n          xlsx: 0\n        }\n      }\n    });\n    interceptor.mixin({\n      'event.import': handleImportEvent,\n      'event.export': handleExportEvent\n    });\n  }\n};\nexports.VXETablePluginExportXLSX = VXETablePluginExportXLSX;\n\nif (typeof window !== 'undefined' && window.VXETable) {\n  window.VXETable.use(VXETablePluginExportXLSX);\n}\n\nvar _default = VXETablePluginExportXLSX;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n"],"sourceRoot":""}